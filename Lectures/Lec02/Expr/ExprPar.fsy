%{
  (* File Expr/ExprPar.fsy
     Parser specification for the simple expression language.
   *)

  open Absyn
%}

%token <int> CSTINT
%token <string> NAME
%token PLUS MINUS TIMES DIVIDE EQ MAX
%token END IN LET COMMA IF THEN ELSE
%token LPAR RPAR LBRA RBRA
%token EOF

%left MINUS PLUS        /* lowest precedence  */
%left TIMES             /* highest precedence */

%start Main
%type <Absyn.expr> Main 

%%

Main:
    Expr EOF                            { $1                }
;

Expr:
    NAME                                { Var $1              }
  | CSTINT                              { CstI $1             }
  | MINUS CSTINT                        { CstI (- $2)         }
  | LPAR Expr RPAR                      { $2                  }
  | LBRA Expr RBRA                      { $2                  }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)     }
  | IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)      }
  | MAX LPAR Expr COMMA Expr RPAR       { Prim("max", $3, $5) }
  | Expr DIVIDE Expr                    { Prim("/", $1, $3)   }
  | Expr TIMES Expr                     { Prim("*", $1, $3)   }
  | Expr PLUS  Expr                     { Prim("+", $1, $3)   }  
  | Expr MINUS Expr                     { Prim("-", $1, $3)   } 
;
